from kubernetes import client, config
import requests
import os
import uuid
import logging
import json


client.configuration.logger = logging.getLogger("kubernetes")
client.configuration.logger.setLevel(logging.DEBUG)
logging.basicConfig(level=logging.DEBUG)


def scale_pod1(namespace, deployment_name, replicas):
    configuration = client.Configuration()
    configuration.host = os.getenv("OPENSHIFT_API_SERVER")
    configuration.verify_ssl = False
    configuration.api_key = {"authorization": f"Bearer {os.getenv('OPENSHIFT_TOKEN')}"}
    print(f"Deployment-statrtd '{deployment_name}' scaled to {replicas} .")

    try:
        print(f"Deployment-statrtd 1'{deployment_name}' scaled to {replicas} .")

        api_instance = client.AppsV1Api(client.ApiClient(configuration))
        body = {
            "spec": {
                "replicas": replicas
            }
        }
        
        print(f"Sending scale request to {deployment_name} in {namespace} with {replicas} replicas...")

        api_instance = client.AppsV1Api(client.ApiClient(configuration))
        print(api_instance.list_namespaced_deployment(namespace=namespace))

        scale_info = api_instance.read_namespaced_deployment_scale(name=deployment_name, namespace=namespace)
        print(f"Current Scale Info: {scale_info}")

    
        api_response = api_instance.patch_namespaced_deployment_scale(
            name=deployment_name, namespace=namespace, body=body
        )
        
        print(f"OCP Response: {api_response}")
        print(f"Deployment '{deployment_name}' successfully scaled to {replicas} replicas.")
        return f"Deployment '{deployment_name}' successfully scaled to {replicas} replicas."

    except client.exceptions.ApiException as e:
        return f"Failed to scale deployment: {e}"
    except Exception as e:
        print(f"Unexpected error: {e}")
        return f"Unexpected error: {e}"


def create_case(notes):
    print("create case")
    random_id = str(uuid.uuid4())
    print(random_id)
    url = os.getenv("CASE_MGT_URL")
    headers = {
        "accept": "application/json",
        "Content-Type": "application/json"
    }
    data = {
        "case_user_id": random_id,
        "trace_id": random_id,
        "case_owner": "SRE",
        "description": notes,
        "title": "Generated by LLM",
        "application_name": "order-srv-1",
        "status": "In Progress",
        "source": "APM",
        "source_type": "APM INGESTION"
    }

    response = requests.post(url, json=data, headers=headers)

    print("Status Code:", response.status_code)
    print("Response:", response.json())

def scale_pod(namespace, deployment_name, replicas):

    # Load OpenShift API details
    OPENSHIFT_API_SERVER = 'https://api.rosa-8grhg.ssnp.p1.openshiftapps.com:6443'
    # os.getenv("OPENSHIFT_API_SERVER")
    OPENSHIFT_TOKEN = 'eyJhbGciOiJSUzI1NiIsImtpZCI6InItUHdvajlTTTh3eEpIVUJuZldUX0k4dURKc3ZuWDZuOTFCTmZlZ1FfY1kifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTc3MTU5MDgxMiwiaWF0IjoxNzQwMDU0ODEyLCJpc3MiOiJodHRwczovL2t1YmVybmV0ZXMuZGVmYXVsdC5zdmMiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6ImRlZmF1bHQiLCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiemFnYS1kZXBsb3ltZW50IiwidWlkIjoiMDAwOTBkYTktZTlkOS00YzI1LTg3OTMtYjExN2I4YjcyOTg4In19LCJuYmYiOjE3NDAwNTQ4MTIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OnphZ2EtZGVwbG95bWVudCJ9.hqYp8tvKenDfqmst-SzoASokbDQHpYZ0T9cZcH90I0hRb9D4tNIIX-ewx-UTbwwjJlwaP_ZLdZfJezthn9YIrm_JKM9lwp-lw3fQAq4kMkJx6nEnWs0fEmpcbIqEh_rINzLj-TTviL62V0f3llvvnPJm51juiqTeCq-ibVxoE-Z-w3wSQ6RdGabKFTsNtcY4Hw0C5ma8l_nh3cBU4RTq_8Oth6ojigydKL1H8E3DxayydY3hLywmMaLhcn4KEgLQqwPXSYO5rFG3J_YNvNf_xishs8_t5gDgDdmkHBQ6r-49kL5czL0d9Kt6UQhYYn1jgHw4At4VZOa8ZFtWPqVrsM_pvtCumKl_QMZcv62hRgli-tZRrOQOPqvLEAikqeMi93J0P43hc0oH2Fu7OkAGwV9UjRAph4tsAP18Y7djBTazYIJFe6_SNYt6FxXy8ITpCcX9cPRPlrGo09boS80U-jVzVDkVyioHfARiajbgARdKuLmgOpKKgkxbl0l7lEwH4qKJX8yjq14G2JljgYeTqkyGq-Ct8FL3k3mRssChNAUapMfwDbV_2X0E4Qfjnzd8tNknHWsxZiZlPOZIrUDtZOfRCOIBqf161nSGkrvF_j7l0XbdrVDQxqDS4P6V5Mb6DpBFQ3En_hijSlKaXeqmvUpss1BKJi6YrKxLH8icSAE'
    # os.getenv("OPENSHIFT_TOKEN")
    NAMESPACE = "observability-testcases"
    DEPLOYMENT_NAME = "order-srv-1"
    REPLICAS = 2  # Change as needed

    # API URL
    url = f"{OPENSHIFT_API_SERVER}/apis/apps/v1/namespaces/{NAMESPACE}/deployments/{DEPLOYMENT_NAME}/scale"
    print(f"üîπ Sending scale request to: {url}")

    # Headers for authentication
    headers = {
        "Authorization": f"Bearer {OPENSHIFT_TOKEN}",
        "Content-Type": "application/merge-patch+json",
        "Accept": "application/json",
    }

    # Payload for scaling
    payload = json.dumps({
        "spec": {
            "replicas": REPLICAS
        }
    })

    # Send HTTP PATCH request
    try:
        print(f"üîπ Sending scale request to: {url}")
        response = requests.patch(url, headers=headers, data=payload, verify=False)

        # Print response status and body
        print(f"‚úÖ Status Code: {response.status_code}")
        print(f"üîç Response: {response.json()}")

        if response.status_code == 200:
            print(f"‚úÖ Successfully scaled '{DEPLOYMENT_NAME}' to {REPLICAS} replicas.")
        else:
            print(f"‚ùå Failed to scale: {response.text}")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå HTTP Request failed: {e}")
