from kubernetes import client, config
import requests
import os
import uuid
import logging
import json


client.configuration.logger = logging.getLogger("kubernetes")
client.configuration.logger.setLevel(logging.DEBUG)
logging.basicConfig(level=logging.DEBUG)


def scale_pod1(namespace, deployment_name, replicas):
    configuration = client.Configuration()
    configuration.host = os.getenv("OPENSHIFT_API_SERVER")
    configuration.verify_ssl = False
    configuration.api_key = {"authorization": f"Bearer {os.getenv('OPENSHIFT_TOKEN')}"}
    print(f"Deployment-statrtd '{deployment_name}' scaled to {replicas} .")

    try:
        print(f"Deployment-statrtd 1'{deployment_name}' scaled to {replicas} .")

        api_instance = client.AppsV1Api(client.ApiClient(configuration))
        body = {
            "spec": {
                "replicas": replicas
            }
        }
        
        print(f"Sending scale request to {deployment_name} in {namespace} with {replicas} replicas...")

        api_instance = client.AppsV1Api(client.ApiClient(configuration))
        print(api_instance.list_namespaced_deployment(namespace=namespace))

        scale_info = api_instance.read_namespaced_deployment_scale(name=deployment_name, namespace=namespace)
        print(f"Current Scale Info: {scale_info}")

    
        api_response = api_instance.patch_namespaced_deployment_scale(
            name=deployment_name, namespace=namespace, body=body
        )
        
        print(f"OCP Response: {api_response}")
        print(f"Deployment '{deployment_name}' successfully scaled to {replicas} replicas.")
        return f"Deployment '{deployment_name}' successfully scaled to {replicas} replicas."

    except client.exceptions.ApiException as e:
        return f"Failed to scale deployment: {e}"
    except Exception as e:
        print(f"Unexpected error: {e}")
        return f"Unexpected error: {e}"


def create_case(notes,anomaly_data):
    print("create case")
    random_id = str(uuid.uuid4())
    print(random_id)
    url = os.getenv("CASE_MGT_URL")
    print(url)

    app_name = anomaly_data.get("app_name", "unknown_app")
    print("--app_name")

    print(app_name)
    print("app_name--")

    print("---headers")

    headers = {
        "accept": "application/json",
        "Content-Type": "application/json"
    }
    print("headers--")

    data = {
        "case_user_id": random_id,
        "trace_id": random_id,
        "case_owner": "SRE",
        "description": notes,
        "title": "Generated by LLM",
        "application_name": app_name,
        "status": "In Progress",
        "source": "APM",
        "source_type": "APM INGESTION"
    }
    
    try :
        response = requests.post(url, json=data, headers=headers,verify=False)
    except requests.exceptions.Timeout:
        logging.error(f"Timeout calling {url} for {data}")
    except requests.exceptions.HTTPError as err:
        logging.error(f"HTTP error {err.response.status_code} from {url}: {err.response.text}")
    except Exception as e:
        logging.error(f"Unexpected error calling {url}: {e}")

    print("Status Code:", response.status_code)
    print("Response:", response.json())

def scale_pod(namespace, deployment_name, replicas):

    # Load OpenShift API details
    OPENSHIFT_API_SERVER = os.getenv("OPENSHIFT_API_SERVER")
    OPENSHIFT_TOKEN = os.getenv("OPENSHIFT_TOKEN")
    # NAMESPACE = "observability-testcases"
    # DEPLOYMENT_NAME = "order-srv-1"
    REPLICAS = 2  # Change as needed

    # API URL
    # url = f"{OPENSHIFT_API_SERVER}/apis/apps/v1/namespaces/{NAMESPACE}/deployments/{DEPLOYMENT_NAME}/scale"
    url = f"{OPENSHIFT_API_SERVER}/apis/apps/v1/namespaces/{namespace}/deployments/{deployment_name}/scale"
    print(f"Sending scale request to: {url}")

    # Headers for authentication
    headers = {
        "Authorization": f"Bearer {OPENSHIFT_TOKEN}",
        "Content-Type": "application/merge-patch+json",
        "Accept": "application/json",
    }

    # Payload for scaling
    payload = json.dumps({
        "spec": {
            "replicas": REPLICAS
        }
    })

    # Send HTTP PATCH request
    try:
        print(f" Sending scale request to: {url}")
        response = requests.patch(url, headers=headers, data=payload, verify=False)

        # Print response status and body
        print(f" Status Code: {response.status_code}")
        print(f" Response: {response.json()}")

        if response.status_code == 200:
            print(f" Successfully scaled '{deployment_name}' to {REPLICAS} replicas.")
        else:
            print(f" Failed to scale: {response.text}")

    except requests.exceptions.RequestException as e:
        print(f" HTTP Request failed: {e}")
